package handlers

import (
	"bytes"
	"encoding/json"
	"net/http/httptest"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func TestCreateOrderPosition_WithMock(t *testing.T) {
	// Create a mock database, specifying the QueryMatcherOption
	mockDB, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
	assert.NoError(t, err)
	defer mockDB.Close()

	// Connect mock database to GORM
	gormDB, err := gorm.Open(postgres.New(postgres.Config{
		Conn: mockDB,
	}), &gorm.Config{})
	assert.NoError(t, err)

	handler := &OrderPositionHandler{DB: gormDB}

	app := fiber.New()
	app.Post("/order_positions", handler.CreateOrderPosition)

	// Example input data
	orderPositionData := map[string]interface{}{
		"id_zamowienia":         1,
		"id_pozycji_jadlospisu": 2,
		"ilosc_produktu":        3,
	}
	body, _ := json.Marshal(orderPositionData)

	// Mock queries and expectations
	mock.ExpectQuery(`SELECT * FROM "pozycja_jadlospisu" WHERE id_pozycji_jadlospisu = $1 ORDER BY "pozycja_jadlospisu"."id_pozycji_jadlospisu" LIMIT $2`).
		WithArgs(2, 1).
		WillReturnRows(sqlmock.NewRows([]string{"id_produktu"}).AddRow(5))

	mock.ExpectQuery(`SELECT * FROM "produkt" WHERE id_produktu = $1 ORDER BY "produkt"."id_produktu" LIMIT $2`).
		WithArgs(5, 1).
		WillReturnRows(sqlmock.NewRows([]string{"cena"}).AddRow(15.0))

	mock.ExpectBegin()

	mock.ExpectQuery(`INSERT INTO "pozycja_zamowienia" ("id_zamowienia","id_pozycji_jadlospisu","ilosc_produktu") VALUES ($1,$2,$3) RETURNING "id_pozycji_zamowienia"`).
		WithArgs(
			int16(1), // id_zamowienia
			int16(2), // id_pozycji_jadlospisu
			int16(3), // ilosc_produktu
		).
		WillReturnRows(sqlmock.NewRows([]string{"id_pozycji_zamowienia"}).AddRow(1))

	positionCost := float64(45)

	// Use the exact SQL query generated by GORM/Postgres
	mock.ExpectExec(`UPDATE zamowienie SET koszt_zamowienia = koszt_zamowienia + $1 WHERE id_zamowienia = $2`).
		WithArgs(positionCost, 1). // Ensure positionCost and id_zamowienia match
		WillReturnResult(sqlmock.NewResult(0, 1))

	mock.ExpectCommit()

	// Perform the test request
	req := httptest.NewRequest("POST", "/order_positions", bytes.NewReader(body))
	req.Header.Set("Content-Type", "application/json")
	resp, err := app.Test(req, -1)
	assert.NoError(t, err)

	// Verify the response
	assert.Equal(t, fiber.StatusOK, resp.StatusCode)

	// Check expectations
	assert.NoError(t, mock.ExpectationsWereMet())
}
